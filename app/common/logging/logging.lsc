
import { ipcMain } from 'electron'
import winston from 'winston'

import { CustomRollbarTransport, rollbarLogger } from './customRollbarTransport.lsc'
import { UserDebugLoggerTransport } from './userDebugLogger.lsc'
import { getSettings } from '../../db/settings.lsc'

rollbarTransportOptions = {
  level: 'error'
  handleExceptions: true,
  humanReadableUnhandledException: true
}
userDebugTransportOptions = {
  level: 'debug'
  handleExceptions: true,
  humanReadableUnhandledException: true
}
/*****
* https://github.com/winstonjs/winston
* Winston log levels: { error: 0, warn: 1, info: 2, verbose: 3, debug: 4, silly: 5 }
* So can use logger.error(), logger.warn(), logger.info(), logger.verbose(), logger.debug()
*/
logger = new winston.Logger({
  level: 'debug',
  exitOnError: false
})

if ISDEV:
  logger.add(winston.transports.Console, {
    handleExceptions: true,
    humanReadableUnhandledException: true,
    json: true,
  })

// dont send errors to rollbar in dev && only if enabled.
if !ISDEV and getSettings().reportErrors:
  addRollbarLogging()

/**
* We also need to disable rollbar itself as it is set to report uncaught exceptions.
*/
addRollbarLogging():void ->
  rollbarLogger.configure({enabled: true})
  logger.add(CustomRollbarTransport, rollbarTransportOptions)

removeRollbarLogging():void ->
  rollbarLogger.configure({enabled: false})
  logger.remove(CustomRollbarTransport)

addUserDebugLogger():void ->
  logger.add(UserDebugLoggerTransport, userDebugTransportOptions)

removeUserDebugLogger():void ->
  logger.remove(UserDebugLoggerTransport)

ipcMain.on('settings-renderer:error-sent', (event, arg) => {
  logger.error('settings-renderer:error-sent', arg)
})


export {
  logger,
  addUserDebugLogger,
  removeUserDebugLogger,
  addRollbarLogging,
  removeRollbarLogging,
}
