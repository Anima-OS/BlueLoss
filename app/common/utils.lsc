import tp from 'timeproxy'

appVersion = require('../../package.json').version

omitGawkFromSettings(settings) -> recursivelyOmitObjProperties(settings, ['__gawk__'])

recursivelyOmitObjProperties(obj: Object, propertyFiltersArr: Array<?string> = []):Object ->
  Object.keys(obj).reduce((newObj, propName) ->
    for elem propertyToFilter in propertyFiltersArr:
      if propertyToFilter === propName: return newObj
    if isObject(obj[propName]):
      return {...newObj, ...{ [propName]: recursivelyOmitObjProperties(obj[propName], propertyFiltersArr) }}
    {...newObj, ...{ [propName]: obj[propName] }}
  , {})

omitInheritedProperties(obj: Object):Object ->
  Object.getOwnPropertyNames(obj).reduce((newObj, propName) ->
    if isObject(obj[propName]):
      return {...newObj, ...{ [propName]: omitInheritedProperties(obj[propName]) }}
    {...newObj, ...{ [propName]: obj[propName] }}
  , {})

/**
 * If you run Electron by pointing it to a js file that's not in the base parent directory with the
 * package.json it will report the Electron binary version rather than what's in your package.json.
 * https://github.com/electron/electron/issues/7085
 */
getProperAppVersion():string -> appVersion
noop() -> return
pipe(...fns) -> param -> fns.reduce((result, fn) -> fn(result), param)
compose(...fns) -> value -> fns.reduceRight((accumulator, current) => current(accumulator), value)
curry(f) -> (...a) -> (...b) -> f(...a, ...b)
curryRight(f) -> (...a) -> (...b) -> f(...b, ...a)
range(start, end) -> Array.from({length: ((end - start) + 1)}, (v, k) -> k + start) //includes end number
isObject(obj):boolean ->
  obj !== null and typeof obj === 'object' and !Array.isArray(obj) and !isFunction(obj)
isFunction(value):boolean -> typeof value === 'function'
tenYearsFromNow():number -> Date.now() + tp.FIVE_HUNDRED_WEEKS
capitalizeFirstLetter(string: string):string -> string.charAt(0).toUpperCase() + string.slice(1)

export {
  omitGawkFromSettings,
  omitInheritedProperties,
  noop,
  isObject,
  pipe,
  curry,
  curryRight,
  range,
  compose,
  tenYearsFromNow,
  capitalizeFirstLetter,
  getProperAppVersion,
  recursivelyOmitObjProperties,
}
