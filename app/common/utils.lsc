import _ from 'lodash'

import { SettingsTypes } from '../types/types.lsc'
import { logger } from './logging/logging.lsc'

noop() -> return

recursiveOmitPropertiesFromObj(settings, properties:Array<string>) ->
  omitInheritedProperties(settings, properties)

logSettingsUpdate(newSettingKey: string, newSettingValue: SettingsTypes):void ->
  logger.debug(
    '======================updateSetting======================\n',
    `updated ${ newSettingKey } with: `,
    newSettingValue,
    {}
  )

omitInheritedProperties(obj: any, propertyFiltersArr: Array<?string> = []) ->
  Object.getOwnPropertyNames(obj).reduce((prev, propName) ->
    for elem propertyToFilter in propertyFiltersArr:
      if propertyToFilter === propName: return prev
    if isObject(obj[propName]):
      return {...prev, ...{ [propName]: omitInheritedProperties(obj[propName], propertyFiltersArr) }}
    {...prev, ...{ [propName]: obj[propName] }}
  , {})


isObject(obj) -> _.isObject(obj) and !_.isArray(obj) and !_.isFunction(obj)
pipe(...fns) -> param -> fns.reduce((result, fn) -> fn(result), param)
curry(f) -> (...a) -> (...b) -> f(...a, ...b)
curryRight(f) -> (...a) -> (...b) -> f(...b, ...a)

export {
  noop,
  logSettingsUpdate,
  omitInheritedProperties,
  recursiveOmitPropertiesFromObj,
  isObject,
  pipe,
  curry,
  curryRight,
}
