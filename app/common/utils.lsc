import { SettingsTypes } from '../types/types.lsc'
import { logger } from './logging/logging.lsc'
import { getSettings } from '../settings/settings.lsc'

logSettingsUpdate(newSettingKey: string, newSettingValue: SettingsTypes):void ->
  logger.debug(`Updated Setting: updated '${ newSettingKey }' with: ${ newSettingValue }`)
  logger.debug(`Settings Are Now: `, omitGawkFromSettings(getSettings()))

omitGawkFromSettings(settings) ->
  recursiveOmitFilterAndInheritedPropertiesFromObj(settings, ['__gawk__'])

recursiveOmitFilterAndInheritedPropertiesFromObj(settings, properties:Array<string>) ->
  omitInheritedProperties(settings, properties)

omitInheritedProperties(obj: any, propertyFiltersArr: Array<?string> = []) ->
  Object.getOwnPropertyNames(obj).reduce((prev, propName) ->
    for elem propertyToFilter in propertyFiltersArr:
      if propertyToFilter === propName: return prev
    if isObject(obj[propName]):
      return {...prev, ...{ [propName]: omitInheritedProperties(obj[propName], propertyFiltersArr) }}
    {...prev, ...{ [propName]: obj[propName] }}
  , {})

noop() -> return
isObject(obj) ->
  obj !== null and typeof obj === 'object' and !Array.isArray(obj) and !isFunction(obj)
isFunction(value) -> typeof value === 'function'
pipe(...fns) -> param -> fns.reduce((result, fn) -> fn(result), param)
curry(f) -> (...a) -> (...b) -> f(...a, ...b)
curryRight(f) -> (...a) -> (...b) -> f(...b, ...a)
range(start, end) -> Array.from({length: (end - start)}, (v, k) -> k + start)

export {
  logSettingsUpdate,
  omitGawkFromSettings,
  recursiveOmitFilterAndInheritedPropertiesFromObj,
  omitInheritedProperties,
  noop,
  isObject,
  pipe,
  curry,
  curryRight,
  range,
}
