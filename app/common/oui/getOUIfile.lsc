import fs from 'fs'
import path from 'path'
import util from 'util'
import { app as electronApp } from 'electron'

import jetpack from 'fs-jetpack'

import { updateSetting } from '../../db/settings.lsc'
import { logger } from '../logging/logging.lsc'

pReadFile = util.promisify(fs.readFile)
fileName = 'lanlost-mac-vendor-prefixes.txt'
downloadedOUIfilePath = path.join(electronApp.getPath('userData'), fileName)
initialOUIfilePath = path.resolve(__dirname, '..', 'common', 'oui', fileName)
let ouiFileData = null

/**
 * If we haven't downloaded a new copy of the MAC vendor prefix list, use
 * our built in one. MAC vendor prefix file from: https://linuxnet.ca/ieee/oui/
 */
loadOUIfileIfNotLoaded():Promise<any> ->
  if ouiFileData: return Promise.resolve()
  jetpack.existsAsync(downloadedOUIfilePath)
    .then((result: string | false): Promise<any> ->
      pReadFile(
        result === 'file' ? downloadedOUIfilePath : initialOUIfilePath,
        'utf8'
      )
    )
    .then((fileData):void ->
      now ouiFileData = fileData.split(/\r\n?|\n/)
    )
    .catch((err):void ->
      logger.error(`Couldn't load OUI file`, err)
      updateSetting('canSearchForMacVendorInfo', false)
    )


getOUIfileData() -> ouiFileData


export {
  loadOUIfileIfNotLoaded,
  getOUIfileData,
}
