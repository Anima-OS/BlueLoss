import path from 'path'
import { app as electronApp } from 'electron'

import jetpack from 'fs-jetpack'

import { updateSetting } from '../db/settings.lsc'
import { logger } from '../common/logging/logging.lsc'

fileName = 'lanlost-mac-vendor-prefixes.json'
downloadedOUIfilePath = path.join(electronApp.getPath('userData'), fileName)
initialOUIfilePath = path.resolve(__dirname, '..', 'oui', fileName)
let ouiFileData = null

/**
 * If we haven't downloaded a new copy of the MAC vendor prefix list, use
 * our built in one. MAC vendor prefix file from: https://linuxnet.ca/ieee/oui/
 */
loadOUIfileIfNotLoaded():Promise<any> ->
  if ouiFileData: return Promise.resolve()
  jetpack.existsAsync(downloadedOUIfilePath)
    .then((result: string | false): Promise<any> ->
      jetpack.readAsync(chooseOUIFilePath(result), 'json')
    )
    .then((fileData):void ->
      now ouiFileData = fileData
    )
    .catch((err):void ->
      logger.error(`Couldn't load OUI file`, err)
      updateSetting('canSearchForMacVendorInfo', false)
    )


chooseOUIFilePath(existsResult: string): string ->
  if existsResult === 'file': return downloadedOUIfilePath
  return initialOUIfilePath

getOUIfileData() -> ouiFileData

updateOUIfileDataInMemory(newData):Object ->
  now ouiFileData = newData
  return ouiFileData

export {
  loadOUIfileIfNotLoaded,
  getOUIfileData,
  updateOUIfileDataInMemory,
}
