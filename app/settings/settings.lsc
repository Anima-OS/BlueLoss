import path from 'path'
import { app as electronApp } from 'electron'

import gawk from 'gawk'
import low from 'lowdb'
import FileSync from 'lowdb/adapters/FileSync'

import { logSettingsUpdate, omitGawkFromSettings } from '../common/utils.lsc'
import { DeviceType, SettingsTypes } from '../types/types.lsc'
import { defaultSettings } from './settingsDefaults.lsc'
import { initSettingsObservers } from './settingsObservers.lsc'
import { initSettingsIPClisteners } from './settingsIPClisteners.lsc'
import { logger } from '../common/logging/logging.lsc'

settingsDBpath = path.join(electronApp.getPath('userData'), 'lanlost-settings.json')
adapter = new FileSync(settingsDBpath)
db = low(adapter)

db.defaults(defaultSettings).write()

settings = gawk(db.getState())
/**
 * settingsLoadedOnStartup is for the debug window - on debug window load, we show
 * the settings loaded on startup as well as the current settings now to help debug any
 * settings issues.
 */
settingsLoadedOnStartup = {...omitGawkFromSettings(settings)}

initSettingsObservers(settings)
initSettingsIPClisteners()

getSettings() -> settings

updateSetting(newSettingKey: string, newSettingValue: SettingsTypes):void ->
  settings[newSettingKey] = newSettingValue
  db.set(newSettingKey, newSettingValue).write()
  logSettingsUpdate(newSettingKey, newSettingValue)

addNewDeviceToSearchFor(deviceToAdd: DeviceType):void ->
  { macAddress } = deviceToAdd
  if deviceIsInDevicesToSearchFor(macAddress): return

  updateSetting('devicesToSearchFor',
    {...settings.devicesToSearchFor, ...{ [ macAddress ]: deviceToAdd }}
  )

removeNewDeviceToSearchFor(deviceToRemove: DeviceType):void ->
  { macAddress } = deviceToRemove
  if !deviceIsInDevicesToSearchFor(macAddress): return

  updateSetting('devicesToSearchFor', filterDevicesToSearchFor(macAddress))

filterDevicesToSearchFor(macAddressToRemove: string):Object ->
  {
    ...for key macAddress, val device in settings.devicesToSearchFor:
      if macAddress != macAddressToRemove: { [ macAddress ]: device }
  }

deviceIsInDevicesToSearchFor(macAddress: string):boolean ->
  settings.devicesToSearchFor[macAddress]

modifyADeviceInDevicesToSearchFor(macAddress: string, propName: string, propValue: any):Object ->
  {
    ...settings.devicesToSearchFor,
    ...{
      [ macAddress ]: {
        ...settings.devicesToSearchFor[macAddress],
        ...{ [ propName ]: propValue }
      }
    }
  }

logStartupSettings() ->
  logger.debug('Settings Loaded At LANLost Startup:', settingsLoadedOnStartup)

export {
  updateSetting,
  getSettings,
  addNewDeviceToSearchFor,
  removeNewDeviceToSearchFor,
  logStartupSettings,
  modifyADeviceInDevicesToSearchFor,
}
