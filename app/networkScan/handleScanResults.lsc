import _ from 'lodash'
import ms from 'ms'
import lockSystem from 'lock-system'

import { DeviceType } from '../types/types.lsc'
import { logger } from '../common/logging/logging.lsc'
import { settingsWindow } from '../settingsWindow/settingsWindow.lsc'
import { getSettings } from '../db/settings.lsc'

let lastTimeSawADeviceWeAreLookingFor = Date.now()

handleScanResults(devices: Array<DeviceType>):void ->
  logger.debug(`scan returned these active devices: \n`, devices)

  { devicesToSearchFor } = getSettings()

  settingsWindow?.webContents?.send(
    'mainprocess:update-of-network-devices-can-see',
    { devicesCanSee: devices }
  )

  if !devicesToSearchFor.length: return
  if foundADeviceWeAreLookingFor(devicesToSearchFor, devices):
    now lastTimeSawADeviceWeAreLookingFor = Date.now()
    return

  locksSystemIfShouldLock()


foundADeviceWeAreLookingFor(devicesToSearchFor, devices):boolean ->
   _.intersectionBy(devicesToSearchFor, devices, 'macAddress').length

shouldLock():boolean ->
  getSettings().lanLostEnabled and
    Date.now() > (lastTimeSawADeviceWeAreLookingFor + ms(`${ getSettings().timeToLock } mins`))

locksSystemIfShouldLock():void ->
  if !shouldLock(): return
  // lockSytem throws on error, so use try/catch
  try:
    lockSystem()
  catch(err):
    logger.error('Error occured trying locking the system : ', err)


export {
  handleScanResults
}
