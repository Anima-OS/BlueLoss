import _ from 'lodash'
import ms from 'ms'
import lockSystem from 'lock-system'

import { DeviceType } from '../types/types.lsc'
import { logger } from '../common/logging/logging.lsc'
import { settingsWindow } from '../settingsWindow/settingsWindow.lsc'
import { getSettings } from '../db/settings.lsc'

let lastTimeSawADeviceWeAreLookingFor = Date.now()

handleScanResults(devices: Array<DeviceType>):void ->
  /**
   * Dunno why, but you need an extra object at the end to make an array of objects
   * print right in winston.
   */
  logger.debug(`scan returned these active devices: \n`, devices, {})

  /**
   * We use the lastSeen time in the UI to show the user the last time we have
   * seen the devices we are looking for.
   */
  devicesWithTimeData = addCurrentTimeToDevices(devices)

  settingsWindow?.webContents?.send('mainprocess:update-of-network-devices-can-see', devicesWithTimeData)

  sawADeviceWeAreLookingFor = _.intersectionBy(getSettings().devicesToSearchFor, devicesWithTimeData, 'macAddress')

  if sawADeviceWeAreLookingFor.length:
    now lastTimeSawADeviceWeAreLookingFor = Date.now()
    return

  if shouldLock() and getSettings().lanLostEnabled:
    lockSystem()


addCurrentTimeToDevices(devices: Array<Object>):Array<Object> ->
  devices.map(device -> {...device, ...{ lastSeen: Date.now() }})

shouldLock():boolean ->
  Date.now() > (lastTimeSawADeviceWeAreLookingFor + ms(`${ getSettings().timeToLock } mins`))

export {
  handleScanResults
}
