import { Socket } from 'net'
import util from 'util'

import getDefaultGateway from 'default-gateway'
import _ from 'lodash'
import ms from 'ms'
import arp from 'node-arp'
import getInternalIP from 'internal-ip'
import isIp from 'is-ip'
import Promise from 'bluebird'

import { getSettings } from '../db/settings.lsc'
import { loadOUIfileIfNotLoaded, getOUIfileData } from '../common/oui/getOUIfile.lsc'
import { handleScanResults } from './handleScanResults.lsc'
import { logger } from '../common/logging/logging.lsc'
import { isObject } from '../common/utils.lsc'
import { DeviceType } from '../types/types.lsc'

pGetMAC = util.promisify(arp.getMAC)
scanInterval = ms('30 seconds')

scanNetwork():void ->
  logger.debug(`new scan started`)

  Promise.resolve(loadOUIfileIfNotLoaded())
    .then(getDefaultGatewayIP)
    .then(generateHostIPs)
    .map(scanHost)
    .filter(isObject)
    .then(handleScanResults)
    .catch(logger.error)
    .finally(() -> setTimeout(scanNetwork, scanInterval))

scanHost(hostIP: string): Promise<any> ->
  connectToHostSocket(hostIP)
    .then(getMacAdressForHostIP)
    .then(getVendorInfoForMacAddress)
    .catch(err -> if !ISDEV: logger.debug(err))

// http://bit.ly/2pzLeD3
connectToHostSocket(hostIP: string): Promise<any> ->
  new Promise((resolve, reject):void ->
    socket = new Socket()

    socket.setTimeout(getSettings().hostScanTimeout)
    socket.connect({ host: hostIP, port: 1 })
    socket.unref()

    socket.on('error', (error):void ->
      if error.code === 'ECONNREFUSED': resolve(hostIP)
      else: reject(error)
    )
    socket.on('timeout', ():void ->
      socket.destroy()
      reject(new Error(`socket timeout for ${ hostIP }`))
    )
    socket.on('connect', ():void ->
      resolve(hostIP)
      socket.destroy()
    )
  )

getDefaultGatewayIP():Promise<any> ->
  getDefaultGateway.v4()
    .then(({gateway: defaultGatewayIP}): ?string ->
      if !isIp.v4(defaultGatewayIP):
        throw new Error(`Didn't get valid gateway IP address`, { defaultGatewayIP })
      logger.debug(`defaultGatewayIP ip: ${ defaultGatewayIP }`)
      defaultGatewayIP
    )

getMacAdressForHostIP(activeHostIP: string):Promise<any> ->
  pGetMAC(activeHostIP)
    .then(macAddress -> ({ ipAddress: activeHostIP, macAddress }))

getVendorInfoForMacAddress({ ipAddress, macAddress }):Promise<DeviceType> ->
  if !getSettings().privateSettings.canSearchForMacVendorInfo:
    return { ipAddress, macAddress }
  ouiSansDelimeters = macAddress.replace(/[.:-]/g, "").substring(0, 6).toUpperCase()
  ouiFileData = getOUIfileData()
  /**
   * use a native for loop here cause the OUI file is over 20,000 lines long.
   * indexOf seems to be the fastest string checker: http://bit.ly/2pABrgG
   */
  for elem line in ouiFileData:
    if line?.indexOf?(ouiSansDelimeters) === 0:
      vendorName = line.split(ouiSansDelimeters)[1].trim()
      return Promise.resolve({ ipAddress, macAddress, vendorName })
  Promise.resolve({ ipAddress, macAddress, vendorName: null })

generateHostIPs(gateway):Array<string> ->
  { hostsScanRangeStart, hostsScanRangeEnd } = getSettings()
  networkOctects = gateway.slice(0, gateway.lastIndexOf('.'))
  internalIp = getInternalIP.v4.sync()

  /**
   * Lodash range doesn;t include the last number.
   */
  _.range(hostsScanRangeStart, hostsScanRangeEnd + 1)
      .map((lastOctet:string) -> `${ networkOctects }.${ lastOctet }`)
      .filter((hostIP:string) -> hostIP !== gateway and hostIP !== internalIp)



export {
  scanNetwork,
}
