import { Socket } from 'net'
import util from 'util'

import getDefaultGateway from 'default-gateway'
import ms from 'ms'
import arp from 'node-arp'
import getInternalIP from 'internal-ip'
import isIp from 'is-ip'
import Promise from 'bluebird'
import ono from 'ono'

import { getSettings } from '../settings/settings.lsc'
import { loadOUIfileIfNotLoaded, getOUIfileData } from '../oui/getOUIfile.lsc'
import { handleScanResults } from './handleScanResults.lsc'
import { logger } from '../common/logging/logging.lsc'
import { isObject, range } from '../common/utils.lsc'
import { DeviceType } from '../types/types.lsc'

pGetMAC = util.promisify(arp.getMAC)
scanInterval = ms('30 seconds')

scanNetwork():void ->
  if !getSettings().lanLostEnabled:
    return scanNetworkIn30Seconds()

  logger.debug(`new scan started`)

  Promise.resolve(loadOUIfileIfNotLoaded())
    .then(getDefaultGatewayIP)
    .then(generatePossibleHostIPs)
    .map(scanHost)
    .filter(isDevice)
    .then(handleScanResults)
    .catch(logger.error)
    .finally(scanNetworkIn30Seconds)

scanHost(hostIP: string): Promise<any> ->
  connectToHostSocket(hostIP)
    .then(addMetaDataToDevice)
    .then(getMacAdressForHostIP)
    .then(getVendorInfoForMacAddress)
    .catch(handleHostScanError)

// http://bit.ly/2pzLeD3
connectToHostSocket(hostIP: string): Promise<any> ->
  new Promise((resolve, reject):void ->
    socket = new Socket()
    socket.setTimeout(getSettings().hostScanTimeout)
    socket.connect({ host: hostIP, port: 1 })
    socket.unref()
    socket.on('error', (error):void ->
      if error.code === 'ECONNREFUSED': resolve(hostIP)
      else: reject(error)
    )
    socket.on('timeout', ():void ->
      reject(ono({ socketTimeout: true }, `socket timeout for ${ hostIP }`))
      socket.destroy()
    )
    socket.on('connect', ():void ->
      resolve(hostIP)
      socket.destroy()
    )
  )

getDefaultGatewayIP():Promise<any> ->
  getDefaultGateway.v4().then(gatewayIsIPV4address)

addMetaDataToDevice(ipAddress: string):DeviceType ->
  ({ ipAddress, lastSeen: Date.now() })

getMacAdressForHostIP(device: DeviceType):Promise<any> ->
  pGetMAC(device.ipAddress).then(macAddress ->
    ({ ...device, macAddress })
  )

getVendorInfoForMacAddress(device: DeviceType):Promise<DeviceType> ->
  if !getSettings().canSearchForMacVendorInfo:
    return Promise.resolve(device)
  Promise.resolve({
    ...device,
    vendorName: findVendorInfoInOUIfile(device)
  })

generatePossibleHostIPs(gateway: string):Promise<Array<string>> ->
  { hostsScanRangeStart, hostsScanRangeEnd } = getSettings()
  networkOctects = gateway.slice(0, gateway.lastIndexOf('.'))
  getInternalIP.v4()
    .then(internalIp ->
      range(hostsScanRangeStart, hostsScanRangeEnd)
        .map((lastOctet:string) -> `${ networkOctects }.${ lastOctet }`)
        .filter((hostIP:string) -> hostIP !== gateway and hostIP !== internalIp)
    )

handleHostScanError(err):void ->
  if err?.socketTimeout: return
  logger.debug(err)

scanNetworkIn30Seconds():void ->
  setTimeout(scanNetwork, scanInterval)

isDevice(device: DeviceType):DeviceType ->
  isObject(device) and device.macAddress

ouiSansDelimeters(device: DeviceType): string ->
  device.macAddress.replace(/[.:-]/g, "").substring(0, 6).toUpperCase()

findVendorInfoInOUIfile(device: DeviceType): ?string ->
  getOUIfileData(device)[ouiSansDelimeters(device)]

gatewayIsIPV4address({gateway: defaultGatewayIP}):Promise<string | Error> ->
  logger.debug(`defaultGatewayIP ip: ${ defaultGatewayIP }`)
  new Promise((resolve, reject) ->
    if !isIp.v4(defaultGatewayIP):
      return reject(new Error(`Didn't get valid gateway IP address: ${ defaultGatewayIP }`))
    resolve(defaultGatewayIP)
  )

export {
  scanNetwork,
}

