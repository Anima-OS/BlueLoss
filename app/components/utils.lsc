import tp from 'timeproxy'
import is from 'typa'
import execa from 'execa'

import packageJson from '../../package.json'
import { openSettingsWindow } from '../components/settingsWindow/settingsWindow.lsc'
import { logger } from '../components/logging/logging.lsc'
import { getSettings } from './settings/settings.lsc'

getScreenResolution():Object ->
  try:
    { stdout } = execa.shellSync(`xrandr | grep '*'`)
    [ width, height ] = stdout.trim().split(' ')[0].split('x')
    return { width: Number(width), height: Number(height) }
  catch(e):
    logger.error(e)

getAppVersion():String -> packageJson.version

setUpDev():void -> if ISDEV && !getSettings().firstRun: openSettingsWindow().catch(logger.error)

omitGawkFromSettings(settings) -> recursivelyOmitObjProperties(settings, ['__gawk__'])

noop() -> return

pipe(...fns) -> param -> fns.reduce((result, fn) -> fn(result), param)

compose(...fns) -> value -> fns.reduceRight((accumulator, current) => current(accumulator), value)

curry(f) -> (...a) -> (...b) -> f(...a, ...b)

curryRight(f) -> (...a) -> (...b) -> f(...b, ...a)

identity(param) -> param

range(start, end) -> Array.from({length: ((end - start) + 1)}, (v, k) -> k + start) //includes end number

tenYearsFromNow():number -> Date.now() + tp.FIVE_HUNDRED_WEEKS

recursivelyOmitObjProperties(obj: Object, propertyFiltersArr: Array<string> = []):Object ->
  Object.keys(obj).reduce((newObj, propName) ->
    for elem propertyToFilter in propertyFiltersArr:
      if propertyToFilter === propName: return newObj
    if is.obj(obj[propName]):
      return {...newObj, ...{ [propName]: recursivelyOmitObjProperties(obj[propName], propertyFiltersArr) }}
    {...newObj, ...{ [propName]: obj[propName] }}
  , {})

omitInheritedProperties(obj: Object):Object ->
  Object.getOwnPropertyNames(obj).reduce((newObj, propName) ->
    if is.obj(obj[propName]):
      return {...newObj, ...{ [propName]: omitInheritedProperties(obj[propName]) }}
    {...newObj, ...{ [propName]: obj[propName] }}
  , {})

generateLogTimeStamp():String ->
  today = new Date()
  `[${ today.getHours() }:${ today.getMinutes() }:${ today.getSeconds() }]`

export {
  getScreenResolution,
  getAppVersion,
  setUpDev,
  omitGawkFromSettings,
  omitInheritedProperties,
  noop,
  pipe,
  curry,
  curryRight,
  range,
  compose,
  identity,
  tenYearsFromNow,
  recursivelyOmitObjProperties,
  generateLogTimeStamp,
}
