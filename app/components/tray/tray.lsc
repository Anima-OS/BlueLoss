import SysTray from 'systray'

import { updateSetting, getSettings } from '../settings/settings.lsc'
import { base64IconData } from './iconsData.lsc'

let systray = null

initTrayMenu():Promise ->
  console.log('initTrayMenu ')
  new Promise((resolve):void ->
    now systray = new SysTray({
      menu: {
        icon: base64IconData[getTrayIconColor()],
        title: "BlueLoss",
        tooltip: "BlueLoss",
        items: [
          {
            title: "Open BlueLoss Settings",
            tooltip: "Open BlueLoss Settings",
            checked: false,
            enabled: true
          },
          {
            title: generateEnabledDisabledLabel(checkIfBlueLossEnabled()),
            tooltip: generateEnabledDisabledLabel(checkIfBlueLossEnabled()),
            checked: false,
            enabled: true
          },

          {
            title: "Quit BlueLoss",
            tooltip: "Quit BlueLoss",
            checked: false,
            enabled: true
          }
        ]
      },
      debug: false,
      copyDir: true, // copy go tray binary to outside directory, useful for packing tool like pkg.
    })
    systray.onClick((action):void ->
      if action.seq_id === 0:
        console.log('open settings window here')
      if action.seq_id === 1:
        newBlueLossEnbaledVal = !checkIfBlueLossEnabled()
        systray.sendAction({
          type: 'update-item',
          item: {
            ...action.item,
            title: generateEnabledDisabledLabel(newBlueLossEnbaledVal),
            tooltip: generateEnabledDisabledLabel(newBlueLossEnbaledVal),
          },
          seq_id: action.seq_id,
        })
        updateSetting('blueLossEnabled', newBlueLossEnbaledVal)
      if action.seq_id === 2:
        systray.kill()
    )
    systray.onReady(() ->
      console.log('onready')
      resolve()
    )
  )

checkIfBlueLossEnabled():Boolean -> getSettings().blueLossEnabled

getTrayIconColor():String -> if ISDEV: 'white' else: getSettings().trayIconColor

/*****
* We can't just check for getSettings().blueLossEnabled in generateEnabledDisabledLabel, because in
* in systray.onClick we don't have the ability to wait for updateSetting to finish before running
* systray.sendAction, so
*/
generateEnabledDisabledLabel(blueLossEnabled):string ->
  `${ if blueLossEnabled: 'Disable' else: 'Enable' } BlueLoss`

updateTrayMenuEnabledItem():void ->
  systray.sendAction({
    type: 'update-item',
    item: {
      checked: false,
      enabled: true
      title: generateEnabledDisabledLabel(checkIfBlueLossEnabled()),
      tooltip: generateEnabledDisabledLabel(checkIfBlueLossEnabled()),
    },
    seq_id: 1,
  })

export {
  initTrayMenu,
  updateTrayMenuEnabledItem,
}
