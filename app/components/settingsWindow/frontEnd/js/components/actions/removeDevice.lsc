import { DeviceType } from '../../../../../types/types.lsc'
import { sendNewSettingToServer } from '../../frontEndUtils.lsc'

/**
* HyperApp - if you need to use the state & actions and return data, you need
* to use `(value) => (state, actions) =>`
* https://github.com/hyperapp/hyperapp#actions
*/
export default removeDevice(deviceToRemove: DeviceType) -> state ->
  if !state.devicesToSearchFor[deviceToRemove.deviceId]: return {}
  devicesToSearchFor = {
    ...for key deviceId, val device in state.devicesToSearchFor:
      if deviceId != deviceToRemove.deviceId: { [ deviceId ]: device }
  }
  sendNewSettingToServer('devicesToSearchFor', devicesToSearchFor)
  ({ devicesToSearchFor })
