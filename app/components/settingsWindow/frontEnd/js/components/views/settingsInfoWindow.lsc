import { h } from 'hyperapp'

import defaultSettings from '../../../../../settings/settingsDefaults.lsc'

export default ({ actions, state }) ->
  infoWindowDisplay = if state.activeTab === 'settingsTab': 'block' else: 'none'
  minTimeToLock = defaultSettings.timeToLock
  minScanInterval = defaultSettings.scanInterval

  <div id="settingsTabInfoWindow" style={ { display: infoWindowDisplay } }>
    <div class="settingContainer">
      <div class="settingInputContainer">
        <label>
          <input
            value={ state.timeToLock }
            min="2"
            onchange={({ currentTarget: { value } }) ->
              newTimeToLock = if !newTimeToLock || value < minTimeToLock: minTimeToLock else: value
              actions.updateSetting({ settingName: 'timeToLock', settingValue: ( newTimeToLock )})
            }
            type="number"
            required
          />
        </label>
      </div>
      <div class="settingDetails">
        <h5 class="settingHeading">
          Time To Lock
        </h5>
        <p class="settingDescription">
          The time in minutes BlueLoss will wait before locking the computer once a device is lost.
        </p>
      </div>
    </div>
    <div class="settingContainer">
      <div class="settingInputContainer">
        <label>
          <input
            value={ state.scanInterval }
            min="30"
            onchange={({ currentTarget: { value } }) ->
              newScanInterval = if !newScanInterval || value < minScanInterval: minScanInterval else: value
              actions.updateSetting({ settingName: 'scanInterval', settingValue: ( newScanInterval )})
            }
            type="number"
            required
          />
        </label>
      </div>
      <div class="settingDetails">
        <h5 class="settingHeading">
          Scan Interval
        </h5>
        <p class="settingDescription">
          The interval in seconds between BlueLoss scans for nearby devices.
        </p>
      </div>
    </div>
    <div class="settingContainer">
      <div class="switch settingInputContainer">
        <label>
          <input
            type="checkbox"
            checked={ state.runOnStartup }
            onchange={event ->
              actions.updateSetting(
                { settingName: 'runOnStartup', settingValue: event.currentTarget.toggled}
              )
            }
          />
          <span class="lever"></span>
        </label>
      </div>
      <div class="settingDetails">
        <h5 class="settingHeading">
          Run On System Startup
        </h5>
        <p class="settingDescription">
        </p>
      </div>
    </div>
    <div class="settingContainer">
      <div class="switch settingInputContainer">
        <label>
          <input
            type="checkbox"
            checked={ state.reportErrors }
            onchange={event ->
              actions.updateSetting(
                { settingName: 'reportErrors', settingValue: event.currentTarget.toggled}
              )
            }
          />
          <span class="lever"></span>
        </label>
      </div>
      <div class="settingDetails">
        <h5 class="settingHeading">
          Error Reporting
        </h5>
        <p class="settingDescription">
          Any errors generated by BlueLoss will be sent to rollbar.com. This helps development of the app.
        </p>
      </div>
    </div>
    <div class="settingContainer">
      <div class="switch settingInputContainer">
        <label>
          <input
            type="checkbox"
            checked={ state.verboseLogging }
            onchange={event ->
              actions.updateSetting(
                { settingName: 'verboseLogging', settingValue: event.currentTarget.toggled}
              )
            }
          />
          <span class="lever"></span>
        </label>
      </div>
      <div class="settingDetails">
        <h5 class="settingHeading">
          Verbose Logging
        </h5>
        <p class="settingDescription">
          Enabling this will turn on verbose logging. You can find your log files by right-clicking on the BlueLoss system tray icon
          and clicking on Open Logs.
        </p>
      </div>
    </div>
  </div>
