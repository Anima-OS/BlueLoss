import { ipcRenderer, remote } from 'electron'

import stringifyObject from 'stringify-object'
import addLineNumbers from 'add-line-numbers'
import isEmpty from 'is-empty'

import { omitInheritedProperties } from '../../settingsWindow/renderer/utils.lsc'

preElem = document.querySelector('#debugOutput')
{ lanLostEnabled } = omitInheritedProperties(remote.getGlobal('settingsWindowRendererInitialSettings'))
let loggingTextSansLineNumbers = ''

ipcRenderer.on('mainprocess:debug-info-sent', (event, { msg = '', meta }):void ->
  now loggingTextSansLineNumbers = createLoggingSansLineNumbers(msg, meta)
  preElem.textContent = addLineNumbers(loggingTextSansLineNumbers)
)

createMetaObjForLogging(meta):string ->
  if isEmpty(meta): return ''
  if meta.stack: meta.stack = meta.stack.split(/\r\n?|\n/)
  stringifyObject(meta).replace(/'/g, '')

createLoggingSansLineNumbers(msg, meta):string ->
  metaObj = createMetaObjForLogging(meta)
  let logString = `${ loggingTextSansLineNumbers }${ msg + metaObj }\n`
  if isDebugWindowOpeningMessage(msg):
    now logString = if lanLostEnabled: `${ logString }Please Wait...\n`
  logString

isDebugWindowOpeningMessage(msg):boolean ->
  msg === 'Current LANLost settings:'

handleRendererWindowError(messageOrEvent, source, lineNumber, columnNumber, error):void ->
  ipcRenderer.send('debug-window-renderer:error-sent',
    { messageOrEvent, source, lineNumber, columnNumber, error: omitInheritedProperties(error) }
  )

window.onerror = handleRendererWindowError
window.onunhandledrejection = handleRendererWindowError

