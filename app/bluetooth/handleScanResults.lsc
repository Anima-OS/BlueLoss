import isEmpty from 'is-empty'
import ms from 'ms'

import { logger } from '../common/logging/logging.lsc'
import { DeviceType } from '../types/types.lsc'
import { getSettings, updateSetting, modifyADeviceInDevicesToSearchFor } from '../settings/settings.lsc'
import { settingsWindow } from '../settingsWindow/settingsWindow.lsc'
import { lockTheSystem } from '../common/lockSystem.lsc'
import { tenYearsFromNow } from '../common/utils.lsc'

/**
* deviceList example:
*  [
*    { deviceName: 'MotoG3', deviceId: 'E1:77:42:CF:F2:11' }.,
*    { deviceName: 'Foo\'s iPad', deviceId: '12:22:F1:AD:46:17' }
*    ...
*  ]
*/
handleScanResults(event, deviceList, callback):void ->
  event.preventDefault()
  logger.info('Bluetooth scan results', deviceList)

  { devicesToSearchFor } = getSettings()
  timeStampedDeviceList = addTimeStampToSeenDevices(deviceList)

  settingsWindow?.webContents?.send(
    'mainprocess:update-of-bluetooth-devices-can-see',
    { devicesCanSee: timeStampedDeviceList }
  )

  if isEmpty(devicesToSearchFor): return
  /**
   * If any devices we are looking for showed up in the latest scan,
   * add the current time to the stored device in devicesToSearchFor.
   */
  for elem { deviceId } in deviceList:
    if !devicesToSearchFor[deviceId]: continue
    updateSetting('devicesToSearchFor',
      modifyADeviceInDevicesToSearchFor(deviceId, 'lastSeen', Date.now())
    )

  /**
   * If a device is lost we lock the computer, however, after that, if
   * the computer is unlocked without the device coming back, we don't want
   * to keep locking the computer because the device is still lost. So we
   * give the device that has just been lost a lastSeen value of 10 years
   * from now (not using Infinity cause it doesn't JSON.stringify for storage).
   */
  for val { lastSeen, deviceId } in devicesToSearchFor:
    if !deviceHasBeenLost(lastSeen): continue
    lockTheSystem()
    updateSetting('devicesToSearchFor',
      modifyADeviceInDevicesToSearchFor(deviceId, 'lastSeen', tenYearsFromNow())
    )

  callback('')  // http://bit.ly/2kZhD74

deviceHasBeenLost(lastTimeSawDevice: number):boolean ->
  Date.now() > (lastTimeSawDevice + ms(`${ getSettings().timeToLock } mins`))

addTimeStampToSeenDevices(deviceList):Array<DeviceType> ->
  [ ...for elem device in deviceList: [{...device, lastSeen: Date.now()}] ]

export {
  handleScanResults
}
