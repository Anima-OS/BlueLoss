import { app as electronApp } from 'electron'

import ms from 'ms'
import got from 'got'

import { getSettings, updateSetting } from '../settings/settings.lsc'
import { logger } from '../common/logging/logging.lsc'
import { showUpdateNotification } from './showUpdateNotification.lsc'

oneDaysTime = ms('1 day')
twoWeeksTime = ms('2 weeks')
userAgentString = `Mozilla/5.0 AppleWebKit (KHTML, like Gecko) Chrome/${ process.versions['chrome'] } Electron/${ process.versions['electron'] } Safari LANLost App https://github.com/Darkle/LANLost`
gotRequestOptions= { headers: { 'user-agent': userAgentString }, json: true }
updateInfoUrl = 'https://raw.githubusercontent.com/Darkle/LANLost/master/updateInfo.json'
appVersion = electronApp.getVersion()

checkForUpdate():void ->
  if shouldCheckForUpdate(): return

  updateSetting('dateLastCheckedForAppUpdate', Date.now())

  got(updateInfoUrl, gotRequestOptions)
    .then(({body: { latestVersion }}):void ->
      if shouldShowUpdateNotification(latestVersion):
        showUpdateNotification(latestVersion)
    )
    .catch((err):void ->
      logger.error('error downloading update info', err)
    )

  checkForUpdateTomorrow()

shouldCheckForUpdate():boolean ->
  Date.now() > (getSettings().dateLastCheckedForAppUpdate + twoWeeksTime)

shouldShowUpdateNotification(latestVersion):boolean ->
  appVersion !== latestVersion and latestVersion !== getSettings().skipUpdateVersion

checkForUpdateTomorrow():void ->
  setTimeout(checkForUpdate, oneDaysTime)


export {
  checkForUpdate
}
