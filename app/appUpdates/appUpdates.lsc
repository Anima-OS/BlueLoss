import ms from 'ms'
import got from 'got'

import { getSettings, updateSetting } from '../settings/settings.lsc'
import { logger } from '../common/logging/logging.lsc'

oneDaysTime = ms('1 day')
twoWeeksTime = ms('2 weeks')
userAgentString = `Mozilla/5.0 AppleWebKit (KHTML, like Gecko) Chrome/${ process.versions['chrome'] } Electron/${ process.versions['electron'] } Safari LANLost App https://github.com/Darkle/LANLost`
gotRequestOptions= { headers: { 'user-agent': userAgentString }, json: true }
updateInfoUrl = 'https://raw.githubusercontent.com/Darkle/LANLost/master/updateInfo.json'

checkForUpdate():void ->
  if shouldCheckForUpdate(): return

  updateSetting('dateLastCheckedForAppUpdate', Date.now())

  got(updateInfoUrl, gotRequestOptions)
    .then((response):void ->
      debugger
      // var updateData = JSON.parse(response.body)
      // if(_.get(updateData, 'latestVersion.length') &&
      //     appVersion !== updateData.latestUpdateVersion &&
      //     updateData.latestVersion !== appSettings.settings.skipUpdateVersion){
      //   showUpdateNotification(updateData.latestVersion)
      // }
    )
    .catch((err):void ->
      logger.error('error downloading update info', err)
    )


  tryCheckForUpdateTomorrow()

shouldCheckForUpdate():boolean ->
  Date.now() > (getSettings().dateLastCheckedForAppUpdate + twoWeeksTime)

tryCheckForUpdateTomorrow():void ->
  setTimeout(checkForUpdate, oneDaysTime)


export {
  checkForUpdate
}
