import '../../config/env.lsc'
import { app as electronApp } from 'electron'

import { setUpDev } from '../common/setUpDev.lsc'
import { getSettings, updateSetting } from '../db/settings.lsc'
import { noop } from '../common/utils.lsc'
import { initTrayMenu } from '../tray/tray.lsc'
import { showSettingsWindow } from '../settingsWindow/settingsWindow.lsc'
import { logger } from '../common/logging/logging.lsc'
import { scanNetwork } from '../networkScan/networkScanner.lsc'
import { scheduleOUIfileUpdate } from '../common/oui/updateOUIfilePeriodically.lsc'

electronApp.once('ready', ():void ->
  if electronApp.makeSingleInstance(noop): electronApp.quit()
  if ISDEV: setUpDev()
  if !getSettings().firstRun: electronApp.dock?.hide()

  initTrayMenu()
  scanNetwork()

  if getSettings().firstRun:
    updateSetting('firstRun', false)
    showSettingsWindow()

  scheduleOUIfileUpdate()
)

electronApp.on('window-all-closed', noop)

process.on('unhandledRejection', logger.error)
