import { h } from 'hyperapp'

export default ({ actions, state }) ->
  infoWindowDisplay = if state.activeTab === 'settingsTab': 'flex' else: 'none'
  iconColorIsWhite = state.trayIconColor === 'white'
  isMac = process.platform === 'darwin'

  <div id="settingsTabInfoWindow" style={ { display: infoWindowDisplay } }>
    <x-box id="timeToLockSetting">
      <x-numberinput
        id="timeToLock"
        value={ state.timeToLock }
        suffix=" mins"
        min="1"
        onchange={(event):void ->
          actions.updateSetting({ settingName: 'timeToLock', settingValue: ( event.currentTarget.value )})
        }
      >
        <x-stepper></x-stepper>
      </x-numberinput>
      <x-label for="timeToLock" id="timeToLockLabel">
        <x-box vertical>
          <x-label>
            <strong>Time To Lock</strong>
          </x-label>
          <x-label>Once a device has been lost, LANLost will wait this many minutes before locking the computer.</x-label>
        </x-box>
      </x-label>
    </x-box>
    <x-box id="iconColorDropdownContainer">
      <select
        class="select"
        id="iconColorDropdown"
        name="iconColorDropdown"
        onchange={(event):void ->
          actions.changeTrayIconColor(event.currentTarget.value)
        }
      >
        <option value="white" selected={ iconColorIsWhite } >White</option>
        <option value="blue" selected={ !iconColorIsWhite } >Blue</option>
      </select>
      <x-label for="iconColorDropdown" id="iconColorDropdownLabel">
        <x-box vertical>
          <x-label>
            <strong>{ if isMac: 'Menu Bar' else: 'Tray' } Icon Color</strong>
          </x-label>
        </x-box>
      </x-label>
    </x-box>
    <x-box>
      <x-checkbox
        id="erroReportingCheckbox"
        toggled={ state.reportErrors }
        onchange={(event):void ->
          actions.updateSetting({ settingName: 'reportErrors', settingValue: event.currentTarget.toggled})
        }
      ></x-checkbox>
      <x-label for="erroReportingCheckbox" id="erroReportingCheckboxLabel">
        <x-box vertical>
          <x-label>
            <strong>Error Reporting</strong>
          </x-label>
          <x-label>Any errors generated by the app will be sent to rollbar. This helps development of the app.</x-label>
        </x-box>
      </x-label>
    </x-box>
    <x-box>
      <x-checkbox
        id="runOnStartupCheckbox"
        toggled={ state.runOnStartup }
        onchange={(event):void ->
          actions.updateSetting({ settingName: 'runOnStartup', settingValue: event.currentTarget.toggled})
        }
      ></x-checkbox>
      <x-label for="runOnStartupCheckbox" id="runOnStartupCheckboxLabel">
        <x-box vertical>
          <x-label>
            <strong>Run On Startup</strong>
          </x-label>
        </x-box>
      </x-label>
    </x-box>
  </div>

