import { remote, ipcRenderer } from 'electron'

/**
* When we get the remote.getGlobal, it has inherited stuff on it like getters and setters, so we cant
* just use an object spread, we need to "sanitize" it with omitInheritedProperties.
*/
getInitialSettingsFromMainProcess() ->
  ({
    ...{
      activeTab: 'statusTab',
      devicesCanSee: [],
      userDebug: false,
    },
    ...omitInheritedProperties(remote.getGlobal('settingsWindowRendererInitialSettings'))
  })

/**
* https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onerror
* https://stackoverflow.com/a/43911292/2785644
*/
handleRendererWindowError(messageOrEvent, source, lineNumber, columnNumber, error):void ->
  ipcRenderer.send('settings-renderer:error-sent',
    { messageOrEvent, source, lineNumber, columnNumber, error: omitInheritedProperties(error) }
  )

omitInheritedProperties(obj) ->
  if !isObject(obj): return {}
  Object.getOwnPropertyNames(obj).reduce((prev, propName) ->
    if isObject(obj[propName]):
      return {...prev, ...{ [propName]: omitInheritedProperties(obj[propName]) }}
    {...prev, ...{ [propName]: obj[propName] }}
  , {})

identity(param) -> param
isObject(obj) ->
  obj !== null and typeof obj === 'object' and !Array.isArray(obj) and !isFunction(obj)
isFunction(value) -> typeof value === 'function'

export {
  getInitialSettingsFromMainProcess,
  handleRendererWindowError,
  identity,
  omitInheritedProperties,
}
