import path from 'path'
import { app as electronApp } from 'electron'

import _ from 'lodash'
import { print as prettyPrintObj } from 'q-i'
import gawk from 'gawk'
import low from 'lowdb'
import FileSync from 'lowdb/adapters/FileSync'

import { logSettingsUpdateInDev } from '../common/utils.lsc'
import { DeviceType, SettingsTypes } from '../types/types.lsc'
import { defaultSettings } from './settingsDefaults.lsc'
import { initSettingsObservers } from './settingsObservers.lsc'
import { initSettingsIPClisteners } from './settingsIPClisteners.lsc'

settingsDBpath = path.join(electronApp.getPath('userData'), 'lanlost-settings.json')
adapter = new FileSync(settingsDBpath)
db = low(adapter)

db.defaults(defaultSettings).write()

settings = gawk(db.getState())

initSettingsObservers(settings)
initSettingsIPClisteners()
if ISDEV: prettyPrintObj(settings)

getSettings() -> settings

updateSetting(newSettingKey: string, newSettingValue: SettingsTypes):void ->
  logSettingsUpdateInDev(newSettingKey, newSettingValue)
  settings[newSettingKey] = newSettingValue
  db.set(newSettingKey, newSettingValue).write()

addNewDeviceToSearchFor(deviceToAdd: DeviceType):void ->
  if findDeviceInDevicesToSearchFor(deviceToAdd.macAddress): return
  updateSetting('devicesToSearchFor', [...settings.devicesToSearchFor, ...[deviceToAdd]])

removeNewDeviceToSearchFor({macAddress: macAddressOfDeviceToRemove}):void ->
  if !findDeviceInDevicesToSearchFor(macAddressOfDeviceToRemove): return
  updateSetting('devicesToSearchFor',
    settings.devicesToSearchFor.filter(({ macAddress }) -> macAddress !== macAddressOfDeviceToRemove)
  )
/*****
* Regular Array.includes compares by reference, not value, so using _.find.
*/
findDeviceInDevicesToSearchFor(macAddress) ->
  _.find(settings.devicesToSearchFor, { macAddress })


export {
  updateSetting,
  getSettings,
  addNewDeviceToSearchFor,
  removeNewDeviceToSearchFor,
}
