import path from 'path'
import { app as electronApp } from 'electron'

import _ from 'lodash'
import gawk from 'gawk'
import low from 'lowdb'
import FileSync from 'lowdb/adapters/FileSync'

import { logSettingsUpdate, omitGawkFromSettings } from '../common/utils.lsc'
import { DeviceType, SettingsTypes } from '../types/types.lsc'
import { defaultSettings } from './settingsDefaults.lsc'
import { initSettingsObservers } from './settingsObservers.lsc'
import { initSettingsIPClisteners } from './settingsIPClisteners.lsc'
import { logger } from '../common/logging/logging.lsc'

settingsDBpath = path.join(electronApp.getPath('userData'), 'lanlost-settings.json')
adapter = new FileSync(settingsDBpath)
db = low(adapter)

db.defaults(defaultSettings).write()

settings = gawk(db.getState())
/**
 * settingsLoadedOnStartup is for the debug window - on debug window load, we show
 * the settings loaded on startup as well as the current settings now to help debug any
 * settings issues.
 */
settingsLoadedOnStartup = {...omitGawkFromSettings(settings)}

initSettingsObservers(settings)
initSettingsIPClisteners()

getSettings() -> settings

updateSetting(newSettingKey: string, newSettingValue: SettingsTypes):void ->
  settings[newSettingKey] = newSettingValue
  db.set(newSettingKey, newSettingValue).write()
  logSettingsUpdate(newSettingKey, newSettingValue)

addNewDeviceToSearchFor(deviceToAdd: DeviceType):void ->
  if findDeviceInDevicesToSearchFor(deviceToAdd.macAddress): return
  updateSetting('devicesToSearchFor', [...settings.devicesToSearchFor, ...[deviceToAdd]])

removeNewDeviceToSearchFor({macAddress: macAddressOfDeviceToRemove}):void ->
  if !findDeviceInDevicesToSearchFor(macAddressOfDeviceToRemove): return
  updateSetting('devicesToSearchFor',
    settings.devicesToSearchFor.filter(({ macAddress }) -> macAddress !== macAddressOfDeviceToRemove)
  )
/*****
* Regular Array.includes compares by reference, not value, so using _.find.
*/
findDeviceInDevicesToSearchFor(macAddress) ->
  _.find(settings.devicesToSearchFor, { macAddress })

logStartupSettings() ->
  logger.debug('Settings Loaded At LANLost Startup:', settingsLoadedOnStartup)


export {
  updateSetting,
  getSettings,
  addNewDeviceToSearchFor,
  removeNewDeviceToSearchFor,
  logStartupSettings,
}
